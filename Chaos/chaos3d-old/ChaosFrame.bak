package cz.kotuc.chaos;

import java.applet.Applet;
import java.awt.BorderLayout;
import java.awt.Frame;
import java.awt.event.*;
import java.awt.GraphicsConfiguration;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.behaviors.picking.*;
import com.sun.j3d.utils.behaviors.keyboard.*;
import com.sun.j3d.utils.image.*;




public class ChaosFrame extends Applet {
    
    Location location = null;
    
    DirectionalLight sunshine = null;
    
    TransformGroup objBgRot = null;
        
    public BranchGroup scene;
    
    Canvas3D canvas3D;
    Canvas3D canvas3D2;
            
    SimpleUniverse su;
    SimpleUniverse su2;
    
   	PickObject pickObject;
    
    TransformGroup objAxis;
    
    public static BranchGroup behaviorRoot = new BranchGroup();
	
	public BranchGroup createSceneGraph() {
	// Create the root of the branch graph
	
	BranchGroup objRoot = new BranchGroup();

	objAxis = new TransformGroup();
	objAxis.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);
	objAxis.addChild(new Axis());
	objRoot.addChild(objAxis);
	


	sunshine = new DirectionalLight(
			new Color3f(1.0f, 0.93f, 0.87f), 
			new Vector3f(0, 0, -1)
		);
		
	sunshine.setCapability(DirectionalLight.ALLOW_DIRECTION_WRITE);
	sunshine.setCapability(DirectionalLight.ALLOW_DIRECTION_READ);
	sunshine.setInfluencingBounds(new BoundingSphere(new Point3d(),1000.0));		

	objRoot.addChild(sunshine);
	
	AmbientLight ambientLight = new AmbientLight(new Color3f(0.35f, 0.35f, 0.62f));
	ambientLight.setInfluencingBounds(new BoundingSphere(new Point3d(),1000.0));		
	objRoot.addChild(ambientLight);
		
	configureViewBranch(objRoot);
	
	objRoot.addChild(createBackground());
	
	location = new Location();
	LocationLoader loader = new LocationLoader(location);
//	loader.load("data/location1.xml");
	
	objRoot.addChild(location.objLocation);	    
    
//    pickObject = new PickObject(canvas3D, location.objLocation);
    
    ViewActualizator va = new ViewActualizator();
	Entity.addBehavior(va);
//    va.setSchedulingBounds(new BoundingSphere(new Point3d(),1000.0));
//    objRoot.addChild(va);
    
//    objRoot.compile();

	return objRoot;
    } // end of CreateSceneGraph method of HelloJava3Db

	public void configureViewBranch (BranchGroup objRoot) {
		TransformGroup vpTrans = null;
        Vector3f translate = new Vector3f();
    	Transform3D T3D = new Transform3D();
    	TransformGroup TG = null;
		
		vpTrans = su.getViewingPlatform().getViewPlatformTransform();
    	translate.set(5.0f, 5.0f, 1.5f);
    	T3D.setTranslation(translate);
    	vpTrans.setTransform(T3D);
    	KeyNavigatorBehavior keyNavBeh = new KeyNavigatorBehavior(vpTrans);
		keyNavBeh.setSchedulingBounds(new BoundingSphere(new Point3d(),1000.0));
    	objRoot.addChild(keyNavBeh);

		su.getViewer().getView().setLocalEyeLightingEnable(true);
	
		AudioDevice audioDev = su.getViewer().createAudioDevice();
	
		ViewingPlatform vp = su.getViewingPlatform();
		vp.setPlatformGeometry(createPlatformGeometry());
		
	}

/**
 *	creating Background
 */
	public Background createBackground () {
		BranchGroup objBg = new BranchGroup();
		
// background		
		Background bg = new Background();
		
		bg.setApplicationBounds(new BoundingSphere(new Point3d(),1000.0));
		Sphere sphereObj = new Sphere(1.0f, Sphere.GENERATE_NORMALS |
			          Sphere.GENERATE_NORMALS_INWARD |
				  Sphere.GENERATE_TEXTURE_COORDS, 45);
        Appearance backgroundApp = sphereObj.getAppearance();
                
        TextureLoader tex = new TextureLoader("images/bg.jpg", this);
        if (tex != null) 
	    	backgroundApp.setTexture(tex.getTexture());
			
//	background rotation showing time
		 				
		Transform3D tBgRot = new Transform3D();
		objBgRot = new TransformGroup(tBgRot);
		objBgRot.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);
        objBgRot.setCapability(TransformGroup.ALLOW_TRANSFORM_READ);
        
        bg.setGeometry(objBg);
        objBg.addChild(objBgRot);
        objBgRot.addChild(sphereObj);
	
		return bg;
	} // end of createBackground method
	
	PlatformGeometry platformGeometry;
	
	public PlatformGeometry createPlatformGeometry () {
		platformGeometry = new PlatformGeometry();
		
		        // This TransformGroup is used to place the cylinder in the scene.
        // The cylinder will be rotated 90 degrees so it will appear as
        // a circle on the screen (could be made into a nice gun site...).
        // The cylinder is also displaced a little in Z so it is in front
        // of the viewer.
        Transform3D xForm = new Transform3D();
        xForm.rotX(Math.PI/2.0);
        xForm.setTranslation(new Vector3d(0.0, 0.0, -0.7));
        TransformGroup placementTG = new TransformGroup(xForm);
        platformGeometry.addChild(placementTG);

        // Create the cylinder - make it thin and transparent.
        Appearance cylinderAppearance = new Appearance();
        TransparencyAttributes transAttrs =
           new TransparencyAttributes(TransparencyAttributes.NICEST|TransparencyAttributes.SCREEN_DOOR, 0.9f);
	//        cylinderAppearance.setTransparencyAttributes(transAttrs);
        Cylinder aimer = new Cylinder(0.01f, 0.005f, 0, cylinderAppearance);
        placementTG.addChild(aimer);

		
		return platformGeometry;
	}
	
	

	
	
	public void setViewBehindPlayer(SimpleUniverse su) {
//eye moving			
		TransformGroup vpTrans = su.getViewingPlatform().getViewPlatformTransform();

		Transform3D tSet = new Transform3D(); 		
		tSet.set(new Vector3f(location.player.pos));
			
		Transform3D tVpSet = new Transform3D(); 		
		tVpSet.set(new Vector3f(0f, 5f, 20f));
						
		Transform3D tVpRot = new Transform3D();
	 	tVpRot.rotZ(location.player.angle-0.5*Math.PI);
	 	
	 	Transform3D tVpRot2 = new Transform3D();
	 	tVpRot2.rotX(location.player.getElevation());
		 			 	
//		tVpSet.lookAt(new Point3d(0.0, 0.0, 0.0), location.player.getPos(), new Vector3d(0.0, 1.0, 0.0));
//		objAxis.setTransform(tVpSet);
			
		tVpRot2.mul(tVpSet);
		tVpRot.mul(tVpRot2);
		tSet.mul(tVpRot);
					
		vpTrans.setTransform(tSet);
	}	


	public void setViewPlayersEyes(SimpleUniverse su) {
//eye moving			
		TransformGroup vpTrans = su.getViewingPlatform().getViewPlatformTransform();

		Transform3D tSet = new Transform3D(); 		
		tSet.set(new Vector3f(location.player.pos));
			
		Transform3D tVpSet = new Transform3D(); 		
		tVpSet.set(new Vector3f(0f, 0.3f, 2f));
						
		Transform3D tVpRot = new Transform3D();
	 	tVpRot.rotZ(location.player.angle-0.5*Math.PI);
	 	
	 	Transform3D tVpRot2 = new Transform3D();
	 	tVpRot2.rotX(location.player.getElevation());
		 			 	
		tVpSet.mul(tVpRot2);
		tVpRot.mul(tVpSet);
		tSet.mul(tVpRot);
		
//		location.player.rightAttackBounds.getLocalToVworld(tSet);
					
		vpTrans.setTransform(tSet);
	}	


    // Create a simple scene and attach it to the virtual universe
	Frame frame2 = new Frame("secondFrame");

    public ChaosFrame() {
        setLayout(new BorderLayout());
/*        GraphicsConfiguration config =
           SimpleUniverse.getPreferredConfiguration();
*/
        canvas3D = new Canvas3D(null);
        canvas3D2 = new Canvas3D(null);
        
        add("Center", canvas3D);
		
		frame2.setLayout(new BorderLayout());
		frame2.add("Center", canvas3D2);
		frame2.setSize(256, 280);
				
//		su = new SimpleUniverse(canvas3D);
//		su2 = new SimpleUniverse(canvas3D2);
		Canvas3D[] cans = new Canvas3D[2];
		cans[0] = canvas3D;		
		cans[1] = canvas3D2;
		su = new ConfiguredUniverse(cans);
		
		scene = createSceneGraph();
//		SharedGroup sharedGraph = new SharedGroup();
//		sharedGraph.addChild(scene);
//		sharedGraph.compile();
		
		canvas3D.addKeyListener(location.player);
		canvas3D.addMouseMotionListener(location.player);
		canvas3D.addMouseListener(location.player);
	
	    BranchGroup bg1 = new BranchGroup();
	    BranchGroup bg2 = new BranchGroup();
	    
//	    bg1.addChild(new Link(sharedGraph));
	    bg1.addChild(scene);
	    bg1.addChild(behaviorRoot);
//	    bg2.addChild(new Link(sharedGraph));
	    
	    su.addBranchGraph(bg1);
//	    su2.addBranchGraph(bg2);

		frame2.setVisible(true);
    } // end of HelloJava3Db (constructor)
    //  The following allows this to be run as an application
    //  as well as an applet

    public static void main(String[] args) {
		Frame frame = new MainFrame(new ChaosFrame(), 256, 256);
    } // end of main (method of HelloJava3Db)

} // end of class HelloJava3Db
	class ViewActualizator extends Behavior {
		WakeupOnElapsedFrames w = new WakeupOnElapsedFrames(0);
		
		public void initialize () {
			wakeupOn(w);			
		}

		public void processStimulus(java.util.Enumeration enum) {
			location.time++;
						
//			System.out.print(location.time+", ");
//actualization of background
			double sunAngle = (double)location.time/30000.0; //1 radian per minute = 30fps*60s
			
			Transform3D tRot = new Transform3D();
			tRot.rotY(-sunAngle); 
			objBgRot.setTransform(tRot);
		
			sunshine.setDirection(new Vector3f((float)Math.cos(sunAngle-0.5*Math.PI), 0.0f, (float)Math.sin(sunAngle-0.5*Math.PI)));


//simulating water efect
//			location.landGeometry.updateData(new ParticlesUpdater());
//			location.landGeometry.updateData(location.waterUpdater);

					
//			setViewBehindPlayer(su); 
//			setViewPlayersEyes(su);
			
	
//			picking object in the middle of canvas3D	
			
//			SceneGraphPath sgp = pickObject.pickClosest(canvas3D.getWidth()/2, canvas3D.getHeight()/2, PickObject.USE_BOUNDS);
//			System.out.println("picked"+sgp);
			
			
			wakeupOn(w);					
		}
	}
