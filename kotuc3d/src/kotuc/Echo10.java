
/*
 * @(#)Echo10.java 1.5 99/02/09
 *
 * Copyright (c) 1998 Sun Microsystems, Inc. All Rights Reserved.
 *
 * Sun grants you ("Licensee") a non-exclusive, royalty free, license to use,
 * modify and redistribute this software in source and binary code form,
 * provided that i) this copyright notice and license appear on all copies of
 * the software; and ii) Licensee does not utilize the software in a manner
 * which is disparaging to Sun.
 *
 * This software is provided "AS IS," without a warranty of any kind. ALL
 * EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES, INCLUDING ANY
 * IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR
 * NON-INFRINGEMENT, ARE HEREBY EXCLUDED. SUN AND ITS LICENSORS SHALL NOT BE
 * LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING
 * OR DISTRIBUTING THE SOFTWARE OR ITS DERIVATIVES. IN NO EVENT WILL SUN OR ITS
 * LICENSORS BE LIABLE FOR ANY LOST REVENUE, PROFIT OR DATA, OR FOR DIRECT,
 * INDIRECT, SPECIAL, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE DAMAGES, HOWEVER
 * CAUSED AND REGARDLESS OF THE THEORY OF LIABILITY, ARISING OUT OF THE USE OF
 * OR INABILITY TO USE SOFTWARE, EVEN IF SUN HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES.
 *
 * This software is not designed or intended for use in on-line control of
 * aircraft, air traffic, aircraft navigation or aircraft communications; or in
 * the design, construction, operation or maintenance of any nuclear
 * facility. Licensee represents and warrants that it will not use or
 * redistribute the Software for such purposes.
 */
package kotuc;

import java.io.*;

import java.awt.Color;

import org.xml.sax.*;
import org.xml.sax.helpers.DefaultHandler;

import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;

public class Echo10 extends DefaultHandler
{
    public Echo10 () {
    	super();
    }
        
    public Echo10 (String filename) {
    	super();
    	main(filename);
    }
    
    static public void main(String filename)
    {
           
        // Use an instance of ourselves as the SAX event handler
        DefaultHandler handler = new Echo10();
        // Use the validating parser
        SAXParserFactory factory = SAXParserFactory.newInstance();
        factory.setValidating(true);
        //factory.setNamespaceAware(true);
        try {
            // Set up output stream
            out = new OutputStreamWriter(System.out, "UTF8");

            // Parse the input
            SAXParser saxParser = factory.newSAXParser();
            saxParser.parse( new File(filename), handler);

	    } catch (SAXParseException spe) {
           // Error generated by the parser
           System.out.println("\n** Parsing error"
              + ", line " + spe.getLineNumber()
              + ", uri " + spe.getSystemId());
           System.out.println("   " + spe.getMessage() );

           // Use the contained exception, if any
           Exception  x = spe;
           if (spe.getException() != null)
               x = spe.getException();
           x.printStackTrace();

        } catch (SAXException sxe) {
           // Error generated by this application
           // (or a parser-initialization error)
           Exception  x = sxe;
           if (sxe.getException() != null)
               x = sxe.getException();
           x.printStackTrace();

        } catch (ParserConfigurationException pce) {
            // Parser with specified options can't be built
            pce.printStackTrace();

        } catch (IOException ioe) {
           // I/O error
           ioe.printStackTrace();
        }
    }

    static private Writer  out;
    static public String indentString = "    "; // Amount to indent
    static public int indentLevel = 0;
	static public Unit[] unitList;
	static public Vertex[] vertexList;
	static public int vertexId;
    static public int curUnitId;    
	public Color curColor;
	
    //===========================================================
    // SAX DocumentHandler methods
    //===========================================================

    public void setDocumentLocator(Locator l)
    {
        // Save this to resolve relative URIs or to give diagnostics.
        try {
          out.write("LOCATOR");
          out.write("\n SYS ID: " + l.getSystemId() );
          out.flush();
        } catch (IOException e) {
            // Ignore errors
        }
    }

    public void startDocument()
    throws SAXException
    {
        
    }

    public void endDocument()
    throws SAXException
    {
            nl();
        	if (unitList==null) emit("UL: je to v pici array je null!!!"); 
        	else emit("UL: bingo ted je notnull :) ");
        	
        	if (vertexList==null) emit("VL: je to v pici array je null!!!"); 
        	else emit("VL: bingo ted je notnull :) ");
    }
            
    public void startElement(String namespaceURI,
                             String lName, // local name
                             String qName, // qualified name
                             Attributes attrs)
    throws SAXException
    {
        indentLevel++;
        String eName = lName; // element name
        if ("".equals(eName)) eName = qName; // namespaceAware = false
                
// unitlist
        if ("unitlist".equals(eName)) {
        	int parts = Integer.valueOf(attrs.getValue("parts")).intValue();
        	unitList = new Unit[parts];
        	curUnitId=0;
        	
        	emit("new unitlist, units: ");
        	emit(String.valueOf(parts));
        	
        	nl();
        	if (unitList==null) emit("UL: je to v pici array je null!!!"); 
        	else emit("bingo tady je notnull :)");
        };
// unit
        if ("unit".equals(eName)) {
        	emit("new Unit(), id: ");
        	emit(String.valueOf(curUnitId));
  
        	if (attrs.getValue("name")==null) unitList[curUnitId]=new Unit();
			else unitList[curUnitId]=new Unit(attrs.getValue("name"));
			        	
			int verts = Integer.valueOf(attrs.getValue("verts")).intValue()+1;
			vertexList=new Vertex[verts];        
        	
        	emit("vertexList = new Vertex[");
        	emit(String.valueOf(verts));
        	       	
        	vertexId=0;
        	
        	nl();
        	if (unitList==null) emit("UL: je to v pici array je null!!!"); 
        	else emit("UL: bingo tady je notnull :) ");
        	
        	if (vertexList==null) emit("VL: je to v pici array je null!!!"); 
        	else emit("VL: bingo tady je notnull :) ");
        };
// vertex
        if ("v".equals(eName)) {
         	int x = Integer.valueOf(attrs.getValue("x")).intValue();
         	int y = Integer.valueOf(attrs.getValue("y")).intValue();
         	int z = Integer.valueOf(attrs.getValue("z")).intValue();
         	
         	try {
         	//	if (!"".equals(attrs.getValue("id").trim())) vertexId = Integer.valueOf(attrs.getValue("id")).intValue();
         		vertexList[vertexId]=new Vertex(x, y, z);
         	}catch(NumberFormatException nfe){
         		emit("V nejakem vrcholu je spatna souradnice nebo id");
         		nfe.printStackTrace();
         	}
         	
        	emit("vertexList[");
        	emit(String.valueOf(vertexId));
        	emit("] = new Vertex(");
        	emit(String.valueOf(x));
        	emit(",");
        	emit(String.valueOf(y));
        	emit(",");
        	emit(String.valueOf(z));
        	emit(")");
        }; 
//polygon        
        if ("p".equals(eName)) {
        	Vertex v1 = vertexList[Integer.valueOf(attrs.getValue("v1")).intValue()];
        	Vertex v2 = vertexList[Integer.valueOf(attrs.getValue("v2")).intValue()];
        	Vertex v3 = vertexList[Integer.valueOf(attrs.getValue("v3")).intValue()];
        	
        	if (attrs.getValue("color")!=null) curColor = Color.decode(attrs.getValue("color"));
        	if (curColor==null) curColor = Color.pink;
        	
         	unitList[curUnitId].addPoly(new Polygon(curColor, v1, v2, v3));        	
  
        	emit("new Polygon(v1, v2, v3)");
        };
      
        if (attrs != null) {
            for (int i = 0; i < attrs.getLength(); i++) {
                String aName = attrs.getLocalName(i); // Attr name 
                if ("".equals(aName)) aName = attrs.getQName(i);
                nl();
                emit(eName);
                emit(".");
                emit(aName);
                emit("=");
                emit(attrs.getValue(i));
                emit("");
            }
        }
        if (attrs.getLength() > 0) nl();
        emit(">");
    }

    public void endElement(String namespaceURI,
                           String sName, // simple name
                           String qName  // qualified name
                          )
    throws SAXException
    {
        String eName = sName; // element name
        if ("".equals(eName)) eName = qName;
        
        if ("unitlist".equals(eName)) {
        	emit("End of file should be");
        };
        if ("unit".equals(eName)) {
        	emit("curUnitId++");
        	curUnitId++;
        };
        if ("v".equals(eName)) {
        	emit("vertexId++");
        	vertexId++;
        };
        if ("p".equals(eName)) {
        };
            
        nl();
        emit("END_ELM: ");
        emit("</"+eName+">");
        indentLevel--;
    }

    public void characters(char buf[], int offset, int len)
    throws SAXException
    {
        nl(); emit("CHARS:   ");
        String s = new String(buf, offset, len);
        if (!s.trim().equals("")) emit(s);
    }

    public void ignorableWhitespace(char buf[], int offset, int len)
    throws SAXException
    {
        // Ignore it
    }

    public void processingInstruction(String target, String data)
    throws SAXException
    {
        nl();
        emit("PROCESS: ");
        emit("<?"+target+" "+data+"?>");
    }

    //===========================================================
    // SAX ErrorHandler methods
    //===========================================================

    // treat validation errors as fatal
    public void error(SAXParseException e)
    throws SAXParseException
    {
        throw e;
    }

    // dump warnings too
    public void warning(SAXParseException err)
    throws SAXParseException
    {
        System.out.println("** Warning"
            + ", line " + err.getLineNumber()
            + ", uri " + err.getSystemId());
        System.out.println("   " + err.getMessage());
    }

    //===========================================================
    // Utility Methods ...
    //===========================================================

    // Wrap I/O exceptions in SAX exceptions, to
    // suit handler signature requirements
    private void emit(String s)
    throws SAXException
    {
        try {
            out.write(s);
            out.flush();
        } catch (IOException e) {
            throw new SAXException("I/O error", e);
        }
    }

    // Start a new line
    // and indent the next line appropriately
    private void nl()
    throws SAXException
    {
        String lineEnd =  System.getProperty("line.separator");
        try {
            out.write(lineEnd);
            for (int i=0; i < indentLevel; i++) out.write(indentString);
        } catch (IOException e) {
            throw new SAXException("I/O error", e);
        }
    }
    
    public boolean isNull() {
    	return unitList==null;
    }
}
