/*
 * MainFrame.java
 *
 *  �bersoldat
 *
 *  autor Tom� Kotula     -   Kotu�
 *  
 *  use
 *     login2();
 *     to connect to travian world with set parameters
 *     do not forget to set your personal data (server, login, password)
 *     also after some time to relogin
 *
 *  use 
 *     clickLink(href); 
 *  to open page with relative link
 *  or 
 *     openPageCookies(url, postdata); 
 *  to open absolute url and to send from data with post
 *  see login2() how to process form
 *       
 *  opened page data can be accessed throught String getContent(); method
 *
 *
 *  see method help for more information
 *
 * Created on 14. duben 2007, 12:51
 */

package travian;

import tools.MyCookieStore;
import java.io.*;
import java.net.*;
import javax.swing.event.*;
import javax.swing.*;
import javax.swing.text.html.*;
import java.util.*;


/**
 *
 * @author  PC
 */
public class TravianMainFrame extends javax.swing.JFrame implements HyperlinkListener {
    
    /** Creates new form MainFrame */
    public TravianMainFrame() {
        initComponents();
        
        postInit();
    }
    
    public void postInit() {
        htmlPane.addHyperlinkListener(this);

//        setLoginData("http://s1.travian.cz/", "Evjozln", "heslo08");
        setLoginData("http://s2.travian.cz/", "kotuc", "kunhuta");
        
//        loadPropertiesEvjozln();
//        loadPropertiesKotuc();


//        CookieManager cm = new CookieManager(new MyCookieStore(), CookiePolicy.ACCEPT_ALL);
 //       CookieManager cm = new CookieManager(null, CookiePolicy.ACCEPT_ALL);
//        CookieHandler.setDefault(cm);
                
    }
  
    MyCookieStore cookiesStore = new MyCookieStore();
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        tabbedPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        htmlPane = new javax.swing.JEditorPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        plainPane = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        resourcesLabel = new javax.swing.JLabel();
        cookieField = new javax.swing.JTextField();
        codeField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        movesLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        vBuildList = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        vBuildingsList = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        threadLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        propertiesTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        addressField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jScrollPane1.setViewportView(htmlPane);

        tabbedPane.addTab("tab1", jScrollPane1);

        plainPane.setColumns(20);
        plainPane.setRows(5);
        jScrollPane2.setViewportView(plainPane);

        tabbedPane.addTab("tab2", jScrollPane2);

        resourcesLabel.setText("jLabel1");

        cookieField.setText("jTextField1");

        codeField.setText("jTextField1");
        codeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codeFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("P\u0159esuny");

        movesLabel.setText("jLabel2");

        vBuildList.setModel(new DefaultListModel() );
        jScrollPane4.setViewportView(vBuildList);

        jLabel2.setText("build list");

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane5.setViewportView(jList1);

        vBuildingsList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        vBuildingsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vBuildingsListMouseClicked(evt);
            }
        });

        jScrollPane6.setViewportView(vBuildingsList);

        jLabel3.setText("buildings");

        jLabel4.setText("emergency list");

        jLabel5.setText("cookie");

        jLabel6.setText("code");

        threadLabel.setText("jLabel7");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(cookieField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(10, 10, 10)
                                .add(movesLabel))
                            .add(jLabel1)
                            .add(resourcesLabel)
                            .add(jLabel5)
                            .add(codeField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 189, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel6)
                            .add(threadLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel3)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 76, Short.MAX_VALUE))
                            .add(jScrollPane6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel2)
                    .add(jLabel4)
                    .add(jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                    .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(resourcesLabel)
                    .add(jLabel2)
                    .add(jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jScrollPane6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 270, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(movesLabel)
                                .add(35, 35, 35)
                                .add(threadLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 133, Short.MAX_VALUE)
                                .add(jLabel6)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(codeField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel5)
                                .add(6, 6, 6)))
                        .add(cookieField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        tabbedPane.addTab("tab3", jPanel1);

        propertiesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(propertiesTable);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 186, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(271, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 346, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        tabbedPane.addTab("tab4", jPanel2);

        addressField.setText(serverurl);
        addressField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addressFieldActionPerformed(evt);
            }
        });

        jButton1.setText("open");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(addressField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 399, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 16, Short.MAX_VALUE)
                .add(jButton1))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(addressField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jButton1))
        );

        statusLabel.setText("jLabel1");

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(statusLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 262, Short.MAX_VALUE)
                .add(jProgressBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(statusLabel)
            .add(jProgressBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        jMenu1.setText("Login");
        jMenuItem1.setText("connect");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });

        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu4.setText("Page");
        jMenuItem7.setText("dorf1");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });

        jMenu4.add(jMenuItem7);

        jMenuItem8.setText("dorf2");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });

        jMenu4.add(jMenuItem8);

        jMenuItem9.setText("Aliance");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });

        jMenu4.add(jMenuItem9);

        jMenuItem10.setText("utoky");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });

        jMenu4.add(jMenuItem10);

        jMenuBar1.add(jMenu4);

        jMenu2.setText("Action");
        jMenuItem2.setText("status");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });

        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("sendTroops");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });

        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Links");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });

        jMenu2.add(jMenuItem4);

        jMenuItem6.setText("submitupgrade");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });

        jMenu2.add(jMenuItem6);

        jMenuItem11.setText("s buildgs");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });

        jMenu2.add(jMenuItem11);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Run");
        jMenuItem5.setText("Protection");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });

        jMenu3.add(jMenuItem5);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .add(tabbedPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tabbedPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void vBuildingsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vBuildingsListMouseClicked

// from JList doc        
        if (evt.getClickCount() == 2) {
             int index = vBuildingsList.locationToIndex(evt.getPoint());
             System.out.println("Double clicked on Item " + index);
//             vBuildingsList.setSelectedIndex(index);
             buildList.add((Building)vBuildingsList.getSelectedValue());
             refreshBuildLists();
        }
    }//GEN-LAST:event_vBuildingsListMouseClicked

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        searchBuildings();
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        clickLink(aliattacksurl);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        clickLink(alianceurl);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        clickLink(dorf2nurl);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        clickLink(dorf1nurl);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // submit building upgrade
        println("upgrading..");
        String buildLink = searchBUpgradeLink();
        if (buildLink!=null) {
            clickLink(buildLink);
        } else println("upgrading failed");
           
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        runUI(new AntiAttack1());
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        searchLinks();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        sendTroops();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void addressFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressFieldActionPerformed
        openPageCookies(addressField.getText(), "");
    }//GEN-LAST:event_addressFieldActionPerformed

    private void codeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codeFieldActionPerformed
        String in = codeField.getText();
        String out = "";
        for (int i = 0; i<in.length(); i+=2) {
            out+=(char)Integer.parseInt(in.substring(i, i+2), 16);
        }
        codeField.setText(out);
    }//GEN-LAST:event_codeFieldActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        readStatus();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        openPageCookies(addressField.getText(), "");
//                openPageCookies(addressField.getText(), "T3E="+cookieField.getText());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        login2();
//        login();
//        easy();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

/*    void easy() {
        String url = "http://www.seznam.cz";
        try {
            htmlPane.setPage(url);
        } catch (IOException ex) {
            ex.printStackTrace();
            println("error");
        }
    }*/
    
    /**
     * use only on first page
     */
    void openPageDefault(String s) {
        URL url=null;
        try {
            url = new URL(s);
        } catch (MalformedURLException ex) {
            ex.printStackTrace();
        }
        try {
            url.openConnection();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        println("openPage() opening "+url);    

        try {
            htmlPane.setPage(url);
            addressField.setText(url.toString());
            plainPane.setText(htmlPane.getText());
            println("hotovo");
        } catch (IOException ex) {
            ex.printStackTrace();
            println("error");
        }
    }
    
//    void openPage(String url) {
////        url = "http://www.seznam.cz";
//        println("opening "+url);        
//        try {
//            htmlPane.setPage(url);
//            addressField.setText(url);
//            println("hotovo");
//        } catch (IOException ex) {
//            ex.printStackTrace();
//            println("error");
//        }
//    }
    
    void open1Page() {
        openPageDefault(serverurl+loginurl);        
    }
    
    
    /**
     * @deprecated
     */
    void openPageWithPost(String urlstring, String datapost) {
                
        try {
            // Construct data
//            String data = URLEncoder.encode("key1", "UTF-8") + "=" + URLEncoder.encode("value1", "UTF-8");
//            data += "&" + URLEncoder.encode("key2", "UTF-8") + "=" + URLEncoder.encode("value2", "UTF-8");

            // Send data
            URL url = new URL(urlstring);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(datapost);
            wr.flush();

            // Get the response
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            plainPane.setText("");
            while ((line = rd.readLine()) != null) {
                plainPane.append(line);
            }
            htmlPane.setText(plainPane.getText());
            plainPane.setText(url+"\n"+datapost+"\n      ------------        \n"+htmlPane.getText());
            wr.close();
            rd.close();
            } catch (Exception e) {
        }
    }
    
//    void clearHtmlPane() {
//        htmlPane = new JEditorPane();
//        htmlPane.setEditorKit(new HTMLEditorKit());
////        htmlPane.setC
//        jScrollPane1.setViewportView(htmlPane);
//    }
    
    public void openPageCookies(String urlstring, String datapost/*, String cookie*/) {
                
        String cookies = "";
        for (HttpCookie hc:this.cookiesStore.getCookies()) {
            cookies += hc.toString()+"; ";
        }
        
        try {
            // Construct data
//            String data = URLEncoder.encode("key1", "UTF-8") + "=" + URLEncoder.encode("value1", "UTF-8");
//            data += "&" + URLEncoder.encode("key2", "UTF-8") + "=" + URLEncoder.encode("value2", "UTF-8");

            // Send data
            URL url = new URL(urlstring);
            println("openPageCookies:"+url+" p�ipojov�n�.. ");
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
// sending cookies            
            conn.setRequestProperty("Cookie", cookies);
// sending form data            
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(datapost);
            wr.flush();
//            conn.getHeaderField()
/*            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(datapost);
            wr.flush();*/

            // Get the response
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream(), "UTF-8"));
//            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));

// reading headers            
//            println("headers:");
            String headerName=null;
            for (int i=1; (headerName = conn.getHeaderFieldKey(i))!=null; i++) {
//                println("header: "+headerName+" "+conn.getHeaderField(i));
                if (headerName.equals("Set-Cookie")) {                  
                    String cookie1 = conn.getHeaderField(i);               
                    println("cookie1:");
                    cookie1 = cookie1.substring(0, cookie1.indexOf(";"));
                    String cookieName = cookie1.substring(0, cookie1.indexOf("="));
                    String cookieValue = cookie1.substring(cookie1.indexOf("=") + 1, cookie1.length());
                    println("name:"+cookieName+" value:"+cookieValue);
                    this.cookiesStore.add(URI.create(serverurl), new HttpCookie(cookieName, cookieValue));
                }
            }

            // clean reading page            
            String line;
//            plainPane.setText("");
            StringBuffer content = new StringBuffer();
            plainPane.setText(null);
            htmlPane.setText(null);
            htmlPane.getEditorKit().createDefaultDocument();
//            clearHtmlPane();
//            println("plainpane:"+plainPane.getText());
//            println("htmlpane:"+htmlPane.getText());
            while ((line = rd.readLine()) != null) {
                content.append(line+"\n");
            }
//            htmlPane.read(rd, new HTMLDocument());
            
            htmlPane.setText(content.toString());
            
//            htmlPane = new JEditorPane("text/html", content.toString());
//            jScrollPane1.setViewportView(htmlPane);
            
            plainPane.setText("url:"+url+"\npostdata:"+datapost+"\ncookies:"+cookies+"\n      ------------        \n"+content.toString());

            
// reading page            
//            String line;
//            plainPane.setText("");
//            while ((line = rd.readLine()) != null) {
//                plainPane.append(line);
//            }
//            htmlPane.setText(plainPane.getText());
//            plainPane.setText(url+"\n"+cookies+"\n      ------------        \n"+htmlPane.getText());

//            wr.close();
            rd.close();
            println("hotovo");
            addressField.setText(url.toString());
            } catch (Exception e) {
        }
    }
    
    
    /**
     * @deprecated
     */
    void openPageCookiesNoPost(String urlstring/*, String cookie*/) {
        String cookies = this.cookiesStore.getCookies().get(0).toString();
        
        try {
            // Construct data
//            String data = URLEncoder.encode("key1", "UTF-8") + "=" + URLEncoder.encode("value1", "UTF-8");
//            data += "&" + URLEncoder.encode("key2", "UTF-8") + "=" + URLEncoder.encode("value2", "UTF-8");

            // Send data
            URL url = new URL(urlstring);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            conn.setRequestProperty("Cookie", cookies);
//            conn.getHeaderField()
/*            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(datapost);
            wr.flush();*/

            // Get the response
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));

// reading headers            
//            println("headers:");
            String headerName=null;
            for (int i=1; (headerName = conn.getHeaderFieldKey(i))!=null; i++) {
//                println("header: "+headerName+" "+conn.getHeaderField(i));
                if (headerName.equals("Set-Cookie")) {                  
                    String cookie1 = conn.getHeaderField(i);               
                    println("cookie1:");
                    cookie1 = cookie1.substring(0, cookie1.indexOf(";"));
                    String cookieName = cookie1.substring(0, cookie1.indexOf("="));
                    String cookieValue = cookie1.substring(cookie1.indexOf("=") + 1, cookie1.length());
                    println("name:"+cookieName+" value:"+cookieValue);
                }
            }


            
// reading page            
////            String line;
////            plainPane.setText("");
////            while ((line = rd.readLine()) != null) {
////                plainPane.append(line);
////            }
////            htmlPane.setText(plainPane.getText());
////            plainPane.setText(url+"\n"+cookies+"\n      ------------        \n"+htmlPane.getText());

//            wr.close();
            rd.close();
            } catch (Exception e) {
        }
    }
    
    String getContent() {
        return plainPane.getText();
    }
    
    void login2() {
        
        println("logging in");
        
        clickLink(loginurl);
        
/*        openPageDefault(serverurl+loginurl);
        
        try {
            Thread.sleep(20*1111);
        } catch (InterruptedException ex) {
            ex.printStackTrace();
        }*/
        
        
        
        int p, p1, p2, p3, p4;
        int inputn = 0;
        String content = getContent();//htmlPane.getText();
//        plainPane.setText(content);
        String data = "";
        p = content.indexOf("form");
        while ((p=content.indexOf("input", p+1))>0) {
            
            p1 = content.indexOf("name=\"", p)+6;
            p2 = content.indexOf("\"", p1);
            String name = content.substring(p1, p2);
                                
            p3 = content.indexOf("value=\"", p)+7;
            p4 = content.indexOf("\"", p3);
            String value = content.substring(p3, p4);

            if (2==inputn) value=this.username;
            if (3==inputn) value=this.password;
            
//            if ("e60d09c".equals(name)) value=this.username;
//            if ("e52985e".equals(name)) value=this.password;
                        
            println(""+inputn+".<input "+name+"="+value);
            data+=name+"="+value+"&";
            
            inputn++;
        }        
            
        data = data.substring(0, data.length()-1);
        
        String url = serverurl+dorf1nurl;
        
        openPageCookies(url, data);
//        openPage2(url, data);
//        openPage(path);
        
    }
    
    long decodeRemainingTime(String ttext) {
        if (ttext==null) return -1;
        int p1 = ttext.indexOf(":");
        int p2 = ttext.lastIndexOf(":");
        int mins = Integer.parseInt(ttext.substring(0, p1))*60; 
        mins += Integer.parseInt(ttext.substring(p1+1, p2)); 
        return mins*60*1000;
    }
    
    /**
     * @deprecated using login2 now
     */
    void loginWithGet() {
        int p, p1, p2, p3, p4;
        String content = htmlPane.getText();
        plainPane.setText(content);
        String path = serverurl+"dorf1.php?";
        p = content.indexOf("form");
        while ((p=content.indexOf("input", p+1))>0) {
            
            p1 = content.indexOf("name=\"", p)+6;
            p2 = content.indexOf("\"", p1);
            String name = content.substring(p1, p2);
                                
            p3 = content.indexOf("value=\"", p)+7;
            p4 = content.indexOf("\"", p3);
            String value = content.substring(p3, p4);
            
            if ("e1a6815".equals(name)) value=this.username;
            if ("eef3c93".equals(name)) value=this.password;
                        
            println("<input "+name+"="+value);
            path+=name+"="+value+"&amp;";
        }        
            
        path = path.substring(0, path.length()-5);
        
        openPageDefault(path);
        
    }
    
        
    
    int lumber, lumberplus, clay, clayplus, iron, ironplus, crop, cropplus;
    String inattacks, insupport;
        
    /**
     *  reads amount of resources, production, unit moves, ...
     *  dorf1 must be opened
     *
     *  
     *  <img class="rf01" usemap="#rx" src="img/un/a/x.gif" width="300" height="267" border="0">
     *  <div id="att" style="position:absolute; width:230px; height:2px; z-index:4; border: 0px solid #000000; left:455px; top:155px"><div class="f10 b">&nbsp;Pohyb jednotek:</div><table class="f10"><tr>
     *  <td><a href="build.php?gid=16"><img src="img/un/a/def1.gif" width="16" height="16" border="0"></a></td>
     *  <td><b class="c3 f10" align="right">&raquo; 1</b></td>
     *  <td><b class="c3 f10">podp.</b></td>
     *  <td align="center" class="f10">za</td>
     *  <td class="f10"><span id=timer1>0:27:57</span> hod.</td>
     *
     */
    void readStatus() {
        
        final String INCOMING = "&raquo;";
        final String OUTCOMING = "&laquo;";
        
        println("reading status");
        int ps, p1, p2, pend;
        String content = getContent();
//                htmlPane.getText();
//        plainPane.setText(content);
/*
        p = content.indexOf("Ap");
        println(content.substring(p, p+8));
        */
        p1 = content.indexOf(" id=l1 ");
        if (p1>0) {
            p1 = content.indexOf(">", p1);
            p2 = content.indexOf("/", p1);
            lumber = Integer.parseInt(content.substring(p1+1, p2).trim());
        }
                    
        p1 = content.indexOf(" id=l2 ");
        if (p1>0) {
            p1 = content.indexOf(">", p1);
            p2 = content.indexOf("/", p1);
            clay = Integer.parseInt(content.substring(p1+1, p2).trim());
        }
        
        p1 = content.indexOf(" id=l3 ");
        if (p1>0) {
            p1 = content.indexOf(">", p1);
            p2 = content.indexOf("/", p1);
            iron = Integer.parseInt(content.substring(p1+1, p2).trim());
        }
        
        p1 = content.indexOf(" id=l4 ");
        if (p1>0) {
            p1 = content.indexOf(">", p1);
            p2 = content.indexOf("/", p1);
            crop = Integer.parseInt(content.substring(p1+1, p2).trim());
        }
        
        String ress = "d�evo: "+lumber+" hlina: "+clay+" �elezo: "+iron+" obil�: "+crop;
        println(ress);
        resourcesLabel.setText(ress);   
        
/// unit movement        
        inattacks = null;        
        insupport = null;
        movesLabel.setText("no moves");
        
        if ((ps=content.indexOf("Pohyb jednotek"))>0) {
            pend = content.indexOf("Produkce");
            /*
            p1 = content.indexOf("podp", ps);
            if ((p1>ps)&&(p1<pend)) {
                p1 = content.indexOf("<span", p1);
                p1 = content.indexOf(">", p1)+1;
                p2 = content.indexOf("<", p1);
                movesLabel.setText("podp. "+content.substring(p1, p2)+" "+decodeRemainingTime(content.substring(p1, p2))/60000+" minutes");
            }
            */
            
            p1 = content.indexOf(INCOMING, ps);
            if ((p1>ps)&&(p1<pend)) {
                
                p2 = content.indexOf("</span>", p1);
                String movement = content.substring(p1, p2);
                                
                p1 = content.indexOf("<span", p1);
                p1 = content.indexOf(">", p1)+1;
                String movetime = content.substring(p1, p2);
                if (movement.contains("tok")) {
                    inattacks = movetime;
                    println("inatacks!: "+inattacks);
                    movesLabel.setText("utok. "+content.substring(p1, p2)+" !!!!");
                } else if (movement.contains("podp")) {
                    insupport = movetime;
                    println("insupp: "+insupport);
                } else
                               
                content.substring(p1, p2);
            }
            
            
        }
        
        movesLabel.setText(">>�tok: "+decodeRemainingTime(inattacks)/60000+"min \n>>podp.: "+decodeRemainingTime(insupport)/60000+"min");
        
    }
    
    void sendTroops() {
        int tox = 50, toy = 50;
        String dname = "";
        int type = 4; // 2 support, 3 kill, 4steal
        int[] t = new int[10];
        
        t[0] = 1;
        
        String data = "";
        data+="b=1";
        data+="&x="+tox+"&y="+toy+"";
        data+="&dname="+dname+"";
        data+="&c="+type+"";
        for (int i = 0; i<10; i++) {
            data+="&t"+(i+1)+"="+t[i];
        }
        data+="&s1=ok";
        
        openPageCookies(serverurl+"a2b.php", data);
        
    }
    
    void searchLinks() {
        println("link search..");
        String content = getContent();
        int p1=0, p2;
        int count = 0;
        while ((p1 = content.indexOf("<a ", p1))>0) {
            p2 = content.indexOf("</a>", p1)+4;
            
            HttpLink link = new HttpLink(content.substring(p1, p2));
//            println("linkdone:"+link);
            p1=p2;
            count++;
        };
        println(""+count+" links found");
    }
  
      
    String searchBUpgradeLink() {
        println("bildup link search..");
        String content = getContent();
        int p1=0, p2;
        if ((p1 = content.indexOf(">Roz", p1))>0) {
            p2 = content.lastIndexOf("\"", p1);
            p1 = content.lastIndexOf("href", p1)+6;
            String link = content.substring(p1, p2); 
            println("found: "+link);
            return link;    
        };
        println("not found: upgrade unavailable");
        return null;
    }            
            
    public void hyperlinkUpdate(HyperlinkEvent he)  {
        println("link pressed");
        openPageDefault(he.getURL().toString());
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TravianMainFrame mf = new TravianMainFrame();
                mf.setVisible(true);
                mf.open1Page();
//                mf.login2();
                
            }
        });
    }
    
    
    
    void println(String s) {
        System.out.println(s);
        statusLabel.setText(s);
    }
    
    String 
            username,
            password,
            serverurl,
            loginurl = "login.php",
            dorf1nurl = "dorf1.php",
            dorf2nurl = "dorf2.php",
            buildurl = "build.php",
            marketurl = "build.php?id=",
            statistikenurl = "statistiken.php",
            mapurl = "karte.php",
            aliattacksurl = "allianz.php?s=2",
            alianceurl = "allianz.php";
    
    /**
     *  eg. setLoginData("http://server.travian.domain/", "name", "password");
     *  especially the server address must be in right format. 
     */
    void setLoginData(String server, String name, String pass) {
        this.serverurl = server;    
        this.username = name;
        this.password = pass;
    }
    
    
    /**
     * @deprecated use setLoginData
     */
    void loadPropertiesEvjozln() {
      
        username = "Evjozln";
        password = "heslo08";
        serverurl = "http://s1.travian.cz/";    
            
    }
    
    /**
     * @deprecated use setLoginData
     */
    void loadPropertiesKotuc() {
        
        username = "kotuc";
        password = "kunhuta";
        serverurl = "http://s2.travian.cz/";    
            
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressField;
    private javax.swing.JTextField codeField;
    static javax.swing.JTextField cookieField;
    private javax.swing.JEditorPane htmlPane;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel movesLabel;
    private javax.swing.JTextArea plainPane;
    private javax.swing.JTable propertiesTable;
    private javax.swing.JLabel resourcesLabel;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JLabel threadLabel;
    private javax.swing.JList vBuildList;
    private javax.swing.JList vBuildingsList;
    // End of variables declaration//GEN-END:variables
    
    class HttpLink {

        HttpLink(String tag) {

            int p1, p2;
            p1 = tag.indexOf("title");  
            if (p1>0) {
                p1 = tag.indexOf("\"", p1)+1;
                p2 = tag.indexOf("\"", p1);
                title = tag.substring(p1, p2);
            } else {
                p1 = tag.indexOf(">", 3)+1;  
                if (p1>0) {
                    p2 = tag.indexOf("<", p1);
                    title = tag.substring(p1, p2);
                }
            }
            p1 = tag.indexOf("href");  
            if (p1>0) {
                p1 = tag.indexOf("\"", p1)+1;
                p2 = tag.indexOf("\"", p1);
                href = tag.substring(p1, p2);
            }
            
            println("link:"+tag);
            println(""+this);
        }

        String href;
        String title;

        public String toString() {
            return "<a href="+href+" title="+title+"></a>";
        }

    }

    /**
     *
     * simulates clicking on link on current page
     *
     * when find a link on page. use this to open resp. submit
     *
     */
    public void clickLink(String href) {
        
        println("link clicked: "+href);
        
        openPageCookies(serverurl+href, "");
        try {
            
            // after that waits some time not to be suspecious and
            // to have enought time to load the page
            
//            Thread.sleep(15*1000); // waits 15 seconds
            for (int t = (int)(10+10*Math.random()); t>0; t--) { // wait few seconds
                jProgressBar1.setValue(100-10*t);
                repaint();
                Thread.sleep(1000); 
            }
            jProgressBar1.setValue(100);
            
        } catch (InterruptedException ex) {
            ex.printStackTrace();
        } // waits 15 seconds
        
    }
    
    /**
     *  upgrades the building
     *  
     * @returns true if succed else false
     *
     */
    boolean tryBuild(String href) {
        println("try build "+href);
        clickLink(href);
            
        String buildLink = searchBUpgradeLink();
            
        if (buildLink!=null) {
                clickLink(buildLink);
                println("upgrade SUCCESSFUL");
                return true;
        } else {
            println("upgrade FAILED");
            return false;
        }
       
//          
    }

    boolean tryBuild(int id) {
        return tryBuild("build.php?id="+id);
    }


    
    /**
      *   check attack if true then spend money (build something). else chceck again after some time
      *   in the mean time try to build one building
      */
    class AntiAttack1 implements Runnable {
        public void run() {
                                    
//            mythread = Thread.currentThread();
            
            while (Thread.currentThread()==mythread) {
//               clickLink(dorf1nurl);
                login2();
                
                try {
                    Thread.sleep(15*1000);
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
                
                clickLink("dorf1.php?newdid=101783"); // Blastula
                
                readStatus();

                //  permanently try build building no. id
                listBuild1();                
//                if (!tryBuild(37)) // academy
//                tryBuild(15);// crop field
                
                
//                inattacks = null;//"0:05:06";
                
//                if (inattacks!=null) {
//                    println("incoming attack "+inattacks);
//                    getReady();
////                    break;
//                } else println("no attacks, waiting");
                
                try {
                    for (int t = (int)(5+20*Math.random()); t>0; t--) { // wait 15 minutes
                        println(t+" mins to next check");
                        Thread.sleep(60*1000); 
                    }
                    
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
                
            }
                        
        }
        
        /**
         *  tries build buildings in build list subsequently. if succed removes it
         */
        void listBuild2() {
            if (buildList.isEmpty()) {
                println("build list is empty!");
                return;
            }
            Building remove=null;
            for (Building bdg:buildList) {
                if (bdg.tryUpgrade()) {
                    remove=bdg;
                    break;
                }
            }
            if (remove!=null) {
                buildList.remove(remove);
                refreshBuildLists();
            }         
        }

        /**
         *  builds in set order.. only the 1st if possible
         */
        void listBuild1() {
                       
            if (buildList.isEmpty()) {
                println("build list is empty!");
//                return; falls because is not needed
                
            }
            
            Building bdg = buildList.get(0);
            
            if (bdg.tryUpgrade()) {
                buildList.remove(bdg);
                refreshBuildLists();
            
            }         
        }

        
        void getReady() {
            
            println("getting ready");
            

            if (!tryBuild(16))// clay field
            if (!tryBuild(3))// wood field
            tryBuild(9);// crop field
            
            if (!tryBuild(25)) // rezidence
            if (!tryBuild(24)) // store
            tryBuild(36); // stables
            
//            clickLink("build?id=6");
//            
//            String buildLink = searchBUpgradeLink();
//            
//            if (buildLink!=null) {
//                println("upgrade link clay mine: "+buildLink);
////            if (buildLink!=null) clickLink(buildLink);
//            } else {
//                
//                clickLink("build?id=4");
//                buildLink = searchBUpgradeLink(); // try another building
//                if (buildLink!=null) {
//                    println("upgrade link iron mine "+buildLink);
//                }
//            }
            

            
        }
        
    }
    
    java.util.List<Building> buildList = new LinkedList<Building>();
    java.util.List<Building> buildings = new LinkedList<Building>();
    
    void refreshBuildLists() {
        vBuildList.setListData(buildList.toArray());
        vBuildingsList.setListData(buildings.toArray());
    }
    
    
    Thread mythread; 
    void runUI(Runnable runui) {
        if (mythread!=null) System.err.println("thread "+mythread+" already running.. canceling!");
        
        mythread = new Thread(runui);
        mythread.start();
        
    }

    
    class Building {
        
        int id;
        String label;
        int level;
        
        boolean tryUpgrade() {
            if ((id<1)||(id>40)) {
                println("invalid building id"+id);
                return false;
            }
            println("upgrading "+this);
            return tryBuild(this.id);
        }
        
        public String toString() {
            return new String(""+id+" "+label);
//            try {
//                return new String(new String(""+id+" "+label+" �rove� "+level).getBytes("UTF-8"), "UTF-8"); 
//            } catch (UnsupportedEncodingException ex) {
//                ex.printStackTrace();
//                return new String(""+id+" "+label+" uroven "+level);
//            } 
        }
        
        void decode(String area) throws Exception {
            println("building:"+area);
            int p1, p2; 
            p1 = area.indexOf("build.php?id=")+13;
            p2 = area.indexOf("\"", p1);
            this.id = Integer.parseInt(area.substring(p1, p2));
            println("id "+id);
            
            p1 = area.indexOf("title");
            p1 = area.indexOf("\"", p1)+1;
            p2 = area.indexOf("\"", p1);
                      
            String title =  area.substring(p1, p2);
            this.label = title;
        }
        
    }
    
    void searchBuildings() {
        println("buildings search..");
        String content = getContent();
        int p1=0, p2;
        int count = 0;
        buildings = new LinkedList<Building>();   
//        vBuildingsList.removeAll();
        while ((p1 = content.indexOf("<area ", p1))>0) {
            p2 = content.indexOf("\">", p1)+2;
            
            Building b = new Building();
            String descript = content.substring(p1, p2);
            try {
                b.decode(descript);
                buildings.add(b);
//                vBuildingsList.add(""+b);
                count++;
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            
            p1=p2;
        
        };
        vBuildingsList.setListData(buildings.toArray());
        println(""+count+" buildings found");
    }
    
    
    
}



